<?php
/**
 * Author: Joris Rietveld <jorisrietveld@gmail.com>
 * Date: 08-12-2018 21:36
 * Licence: GPLv3 - General Public Licence version 3
 */

namespace App\Controller\Teacher\Game;


use App\Controller\Teacher\TeacherController;
use App\Entity\Scenario;
use App\Form\ScenarioType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Class UploadGameScenarioController
 * @package App\Controller\Teacher\Game
 */
final class UploadGameScenarioController extends TeacherController
{
    /**
     * Serves the upload game scenario page. On this page the user can upload new game scenarios with the
     * form: ScenarioType that is injected in the twig template.
     *
     * @param Request $request
     *
     * @return Response
     */
    public function index( Request $request ): Response
    {
        $scenarioEntity = new Scenario();

        $form = $this->createForm( ScenarioType::class, $scenarioEntity, [
            'action' => $this->generateUrl( 'upload_scenario' ),
            'method' => 'POST',
        ] );

        $form->handleRequest( $request );

        if ( $form->isSubmitted() && $form->isValid() ) {
            // Get the Doctrine Entity manager that can store the scenario in the database.
            $entityManager = $this->getDoctrine()->getManager();

            // Add a persist job that will store the game scenario to the database.
            $entityManager->persist( $scenarioEntity );

            // Tell the entity manager to flush all jobs to the database.
            $entityManager->flush();

            // Add a flash message to notify the user, the message is in the teacher translation domain
            $this->addFlash( 'notice', $this->getMessage( 'scenario.upload.form.success' ) );

        }
        return $this->render( 'Teacher/Game/UploadScenario.html.twig', [
            'form' => $form,
        ] );
    }

    /**
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\RedirectResponse|Response
     */
    public function new(Request $request)
    {
        $scenarioEntity = new Scenario();
        $form = $this->createForm( ScenarioType::class, $scenarioEntity, [
            'action' => $this->generateUrl( 'teacher_upload_scenario_new_form_submit' ),
            'method' => 'POST',
        ] );
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $file = $scenarioEntity->getScenario();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('scenarios_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $scenario->setScenario($fileName);

            // ... persist the $product variable or any other work

            return $this->redirect($this->generateUrl('app_product_list'));
        }

        return $this->render('Teacher/Game/UploadScenario.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName(): string
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5( uniqid(
            $this->get( 'request_stack' )->getCurrentRequest()->getHost(),
            true
        ) );
    }


}